/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LiveClass } from "./LiveClass";
import { LiveClassCountArgs } from "./LiveClassCountArgs";
import { LiveClassFindManyArgs } from "./LiveClassFindManyArgs";
import { LiveClassFindUniqueArgs } from "./LiveClassFindUniqueArgs";
import { DeleteLiveClassArgs } from "./DeleteLiveClassArgs";
import { LiveClassService } from "../liveClass.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LiveClass)
export class LiveClassResolverBase {
  constructor(
    protected readonly service: LiveClassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LiveClass",
    action: "read",
    possession: "any",
  })
  async _liveClassesMeta(
    @graphql.Args() args: LiveClassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LiveClass])
  @nestAccessControl.UseRoles({
    resource: "LiveClass",
    action: "read",
    possession: "any",
  })
  async liveClasses(
    @graphql.Args() args: LiveClassFindManyArgs
  ): Promise<LiveClass[]> {
    return this.service.liveClasses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LiveClass, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LiveClass",
    action: "read",
    possession: "own",
  })
  async liveClass(
    @graphql.Args() args: LiveClassFindUniqueArgs
  ): Promise<LiveClass | null> {
    const result = await this.service.liveClass(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveClass)
  @nestAccessControl.UseRoles({
    resource: "LiveClass",
    action: "delete",
    possession: "any",
  })
  async deleteLiveClass(
    @graphql.Args() args: DeleteLiveClassArgs
  ): Promise<LiveClass | null> {
    try {
      return await this.service.deleteLiveClass(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
