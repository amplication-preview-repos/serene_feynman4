/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LiveClass as PrismaLiveClass } from "@prisma/client";

export class LiveClassServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LiveClassCountArgs, "select">
  ): Promise<number> {
    return this.prisma.liveClass.count(args);
  }

  async liveClasses(
    args: Prisma.LiveClassFindManyArgs
  ): Promise<PrismaLiveClass[]> {
    return this.prisma.liveClass.findMany(args);
  }
  async liveClass(
    args: Prisma.LiveClassFindUniqueArgs
  ): Promise<PrismaLiveClass | null> {
    return this.prisma.liveClass.findUnique(args);
  }
  async createLiveClass(
    args: Prisma.LiveClassCreateArgs
  ): Promise<PrismaLiveClass> {
    return this.prisma.liveClass.create(args);
  }
  async updateLiveClass(
    args: Prisma.LiveClassUpdateArgs
  ): Promise<PrismaLiveClass> {
    return this.prisma.liveClass.update(args);
  }
  async deleteLiveClass(
    args: Prisma.LiveClassDeleteArgs
  ): Promise<PrismaLiveClass> {
    return this.prisma.liveClass.delete(args);
  }
}
